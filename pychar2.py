#!/usr/bin/env python3
# Copyright (c) 2020-2021 Pieter Wuille
# Distributed under the MIT software license, see the accompanying
# file LICENSE or http://www.opensource.org/licenses/mit-license.php.

"""Native Python implementation of characteristic 2 field algebra.

For efficiency reasons, all field elements, vectors, and polynomials
are represented as ints, without individual wrapper objects. The
interpretation of elements is determined by field objects which are
passed around along with the elements, but the zero and one elements
are guaranteed to be represented by 0 and 1.

Field classes gf are expected to expose:
- gf.BITS: field order is (2**gf.BITS)
- gf.BASE: base field, or None
- gf.PRIM: a generator for the multiplicative group, or None if not known
- gf.mul(a,b): multiply a and b
- gf.sqr(v): square v
- gf.inv(v): invert nonzero v

Addition of field elements is simply the xor (^) operation.
"""

# Prime factors with multiplicity of (2**i - 1)
POW2MINUS1_FACTORS = [
    None,
    [],
    [(3, 1)],
    [(7, 1)],
    [(3, 1), (5, 1)],
    [(31, 1)],
    [(3, 2), (7, 1)],
    [(127, 1)],
    [(3, 1), (5, 1), (17, 1)],
    [(7, 1), (73, 1)],
    [(3, 1), (11, 1), (31, 1)],
    [(23, 1), (89, 1)],
    [(3, 2), (5, 1), (7, 1), (13, 1)],
    [(8191, 1)],
    [(3, 1), (43, 1), (127, 1)],
    [(7, 1), (31, 1), (151, 1)],
    [(3, 1), (5, 1), (17, 1), (257, 1)],
    [(131071, 1)],
    [(3, 3), (7, 1), (19, 1), (73, 1)],
    [(524287, 1)],
    [(3, 1), (5, 2), (11, 1), (31, 1), (41, 1)],
    [(7, 2), (127, 1), (337, 1)],
    [(3, 1), (23, 1), (89, 1), (683, 1)],
    [(47, 1), (178481, 1)],
    [(3, 2), (5, 1), (7, 1), (13, 1), (17, 1), (241, 1)],
    [(31, 1), (601, 1), (1801, 1)],
    [(3, 1), (2731, 1), (8191, 1)],
    [(7, 1), (73, 1), (262657, 1)],
    [(3, 1), (5, 1), (29, 1), (43, 1), (113, 1), (127, 1)],
    [(233, 1), (1103, 1), (2089, 1)],
    [(3, 2), (7, 1), (11, 1), (31, 1), (151, 1), (331, 1)],
    [(2147483647, 1)],
    [(3, 1), (5, 1), (17, 1), (257, 1), (65537, 1)],
    [(7, 1), (23, 1), (89, 1), (599479, 1)],
    [(3, 1), (43691, 1), (131071, 1)],
    [(31, 1), (71, 1), (127, 1), (122921, 1)],
    [(3, 3), (5, 1), (7, 1), (13, 1), (19, 1), (37, 1), (73, 1), (109, 1)],
    [(223, 1), (616318177, 1)],
    [(3, 1), (174763, 1), (524287, 1)],
    [(7, 1), (79, 1), (8191, 1), (121369, 1)],
    [(3, 1), (5, 2), (11, 1), (17, 1), (31, 1), (41, 1), (61681, 1)],
    [(13367, 1), (164511353, 1)],
    [(3, 2), (7, 2), (43, 1), (127, 1), (337, 1), (5419, 1)],
    [(431, 1), (9719, 1), (2099863, 1)],
    [(3, 1), (5, 1), (23, 1), (89, 1), (397, 1), (683, 1), (2113, 1)],
    [(7, 1), (31, 1), (73, 1), (151, 1), (631, 1), (23311, 1)],
    [(3, 1), (47, 1), (178481, 1), (2796203, 1)],
    [(2351, 1), (4513, 1), (13264529, 1)],
    [(3, 2), (5, 1), (7, 1), (13, 1), (17, 1), (97, 1), (241, 1), (257, 1), (673, 1)],
    [(127, 1), (0x40810204081, 1)],
    [(3, 1), (11, 1), (31, 1), (251, 1), (601, 1), (1801, 1), (4051, 1)],
    [(7, 1), (103, 1), (2143, 1), (11119, 1), (131071, 1)],
    [(3, 1), (5, 1), (53, 1), (157, 1), (1613, 1), (2731, 1), (8191, 1)],
    [(6361, 1), (69431, 1), (20394401, 1)],
    [(3, 4), (7, 1), (19, 1), (73, 1), (87211, 1), (262657, 1)],
    [(23, 1), (31, 1), (89, 1), (881, 1), (3191, 1), (201961, 1)],
    [(3, 1), (5, 1), (17, 1), (29, 1), (43, 1), (113, 1), (127, 1), (15790321, 1)],
    [(7, 1), (32377, 1), (524287, 1), (1212847, 1)],
    [(3, 1), (59, 1), (233, 1), (1103, 1), (2089, 1), (3033169, 1)],
    [(179951, 1), (0x2e9db69cff1, 1)],
    [(3, 2), (5, 2), (7, 1), (11, 1), (13, 1), (31, 1), (41, 1), (61, 1), (151, 1), (331, 1), (1321, 1)],
    [(0x1fffffffffffffff, 1)],
    [(3, 1), (715827883, 1), (2147483647, 1)],
    [(7, 2), (73, 1), (127, 1), (337, 1), (92737, 1), (649657, 1)],
    [(3, 1), (5, 1), (17, 1), (257, 1), (641, 1), (65537, 1), (6700417, 1)],
    [(31, 1), (8191, 1), (0x8425296b5bdf, 1)],
    [(3, 2), (7, 1), (23, 1), (67, 1), (89, 1), (683, 1), (20857, 1), (599479, 1)],
    [(193707721, 1), (761838257287, 1)],
    [(3, 1), (5, 1), (137, 1), (953, 1), (26317, 1), (43691, 1), (131071, 1)],
    [(7, 1), (47, 1), (178481, 1), (0x924925b6db7, 1)],
    [(3, 1), (11, 1), (31, 1), (43, 1), (71, 1), (127, 1), (281, 1), (86171, 1), (122921, 1)],
    [(228479, 1), (48544121, 1), (212885833, 1)],
    [(3, 3), (5, 1), (7, 1), (13, 1), (17, 1), (19, 1), (37, 1), (73, 1), (109, 1), (241, 1), (433, 1), (38737, 1)],
    [(439, 1), (2298041, 1), (0x883c1153d41, 1)],
    [(3, 1), (223, 1), (1777, 1), (25781083, 1), (616318177, 1)],
    [(7, 1), (31, 1), (151, 1), (601, 1), (1801, 1), (100801, 1), (10567201, 1)],
    [(3, 1), (5, 1), (229, 1), (457, 1), (174763, 1), (524287, 1), (525313, 1)],
    [(23, 1), (89, 1), (127, 1), (0x8112264cd9bb77f, 1)],
    [(3, 2), (7, 1), (79, 1), (2731, 1), (8191, 1), (121369, 1), (22366891, 1)],
    [(2687, 1), (202029703, 1), (0x103413e6cb7, 1)],
    [(3, 1), (5, 2), (11, 1), (17, 1), (31, 1), (41, 1), (257, 1), (61681, 1), (4278255361, 1)],
    [(7, 1), (73, 1), (2593, 1), (71119, 1), (262657, 1), (97685839, 1)],
    [(3, 1), (83, 1), (13367, 1), (164511353, 1), (8831418697, 1)],
    [(167, 1), (0xc4372f855d824ca58e9, 1)],
    [(3, 2), (5, 1), (7, 2), (13, 1), (29, 1), (43, 1), (113, 1), (127, 1), (337, 1), (1429, 1), (5419, 1), (14449, 1)],
    [(31, 1), (131071, 1), (0x84214a52b5ad7bdf, 1)],
    [(3, 1), (431, 1), (9719, 1), (2099863, 1), (0x2aaaaaaaaab, 1)],
    [(7, 1), (233, 1), (1103, 1), (2089, 1), (4177, 1), (0x8f72eebe387, 1)],
    [(3, 1), (5, 1), (17, 1), (23, 1), (89, 1), (353, 1), (397, 1), (683, 1), (2113, 1), (2931542417, 1)],
    [(0x1ffffffffffffffffffffff, 1)],
    [(3, 3), (7, 1), (11, 1), (19, 1), (31, 1), (73, 1), (151, 1), (331, 1), (631, 1), (23311, 1), (18837001, 1)],
    [(127, 1), (911, 1), (8191, 1), (112901153, 1), (23140471537, 1)],
    [(3, 1), (5, 1), (47, 1), (277, 1), (1013, 1), (1657, 1), (30269, 1), (178481, 1), (2796203, 1)],
    [(7, 1), (2147483647, 1), (0x924924936db6db7, 1)],
    [(3, 1), (283, 1), (2351, 1), (4513, 1), (13264529, 1), (165768537521, 1)],
    [(31, 1), (191, 1), (524287, 1), (420778751, 1), (30327152671, 1)],
    [(3, 2), (5, 1), (7, 1), (13, 1), (17, 1), (97, 1), (193, 1), (241, 1), (257, 1), (673, 1), (65537, 1), (22253377, 1)],
    [(11447, 1), (0xb73493decfd9b68318ef9, 1)],
    [(3, 1), (43, 1), (127, 1), (0x3f80fe03f81, 1), (0x40810204081, 1)],
    [(7, 1), (23, 1), (73, 1), (89, 1), (199, 1), (153649, 1), (599479, 1), (33057806959, 1)],
    [(3, 1), (5, 3), (11, 1), (31, 1), (41, 1), (101, 1), (251, 1), (601, 1), (1801, 1), (4051, 1), (8101, 1), (268501, 1)],
    [(0x6c279f03a0f, 1), (0x4bbe4964e1a8b11, 1)],
    [(3, 2), (7, 1), (103, 1), (307, 1), (2143, 1), (2857, 1), (6529, 1), (11119, 1), (43691, 1), (131071, 1)],
    [(2550183799, 1), (0xd79331b1cd9080adb9, 1)],
    [(3, 1), (5, 1), (17, 1), (53, 1), (157, 1), (1613, 1), (2731, 1), (8191, 1), (858001, 1), (308761441, 1)],
    [(7, 2), (31, 1), (71, 1), (127, 1), (151, 1), (337, 1), (29191, 1), (106681, 1), (122921, 1), (152041, 1)],
    [(3, 1), (107, 1), (6361, 1), (69431, 1), (20394401, 1), (0x19852f0d8ec1, 1)],
    [(0x7ffffffffffffffffffffffffff, 1)],
    [(3, 4), (5, 1), (7, 1), (13, 1), (19, 1), (37, 1), (73, 1), (109, 1), (87211, 1), (246241, 1), (262657, 1), (279073, 1)],
    [(745988807, 1), (0xb83cbeccdc926056c109, 1)],
    [(3, 1), (11, 2), (23, 1), (31, 1), (89, 1), (683, 1), (881, 1), (2971, 1), (3191, 1), (201961, 1), (48912491, 1)],
    [(7, 1), (223, 1), (321679, 1), (26295457, 1), (319020217, 1), (616318177, 1)],
    [(3, 1), (5, 1), (17, 1), (29, 1), (43, 1), (113, 1), (127, 1), (257, 1), (5153, 1), (15790321, 1), (54410972897, 1)],
    [(3391, 1), (23279, 1), (65993, 1), (1868569, 1), (0x3ca43f3d97c6f, 1)],
    [(3, 2), (7, 1), (571, 1), (32377, 1), (174763, 1), (524287, 1), (1212847, 1), (160465489, 1)],
    [(31, 1), (47, 1), (14951, 1), (178481, 1), (4036961, 1), (0x966fc18022f69, 1)],
    [(3, 1), (5, 1), (59, 1), (233, 1), (1103, 1), (2089, 1), (3033169, 1), (107367629, 1), (536903681, 1)],
    [(7, 1), (73, 1), (79, 1), (937, 1), (6553, 1), (8191, 1), (86113, 1), (121369, 1), (7830118297, 1)],
    [(3, 1), (2833, 1), (37171, 1), (179951, 1), (1824726041, 1), (0x2e9db69cff1, 1)],
    [(127, 1), (239, 1), (20231, 1), (131071, 1), (62983048367, 1), (131105292137, 1)],
    [(3, 2), (5, 2), (7, 1), (11, 1), (13, 1), (17, 1), (31, 1), (41, 1), (61, 1), (151, 1), (241, 1), (331, 1), (1321, 1), (61681, 1), (4562284561, 1)],
    [(23, 1), (89, 1), (727, 1), (0x168c2661efceb3c3748ef748e7, 1)],
    [(3, 1), (0xaaaaaaaaaaaaaab, 1), (0x1fffffffffffffff, 1)],
    [(7, 1), (13367, 1), (3887047, 1), (164511353, 1), (0x2776572c79ed291, 1)],
    [(3, 1), (5, 1), (5581, 1), (8681, 1), (49477, 1), (384773, 1), (715827883, 1), (2147483647, 1)],
    [(31, 1), (601, 1), (1801, 1), (269089806001, 1), (0x41606b48636df251, 1)],
    [(3, 3), (7, 2), (19, 1), (43, 1), (73, 1), (127, 1), (337, 1), (5419, 1), (92737, 1), (649657, 1), (77158673929, 1)],
    [(0x7fffffffffffffffffffffffffffffff, 1)],
    [(3, 1), (5, 1), (17, 1), (257, 1), (641, 1), (65537, 1), (274177, 1), (6700417, 1), (0x3d30f19cd101, 1)],
    [(7, 1), (431, 1), (9719, 1), (2099863, 1), (0x924924924936db6db6db7, 1)],
    [(3, 1), (11, 1), (31, 1), (131, 1), (2731, 1), (8191, 1), (409891, 1), (7623851, 1), (0x8425296b5bdf, 1)],
    [(263, 1), (0x7c97d9108c2ad4329db02eb8f166349, 1)],
    [(3, 2), (5, 1), (7, 1), (13, 1), (23, 1), (67, 1), (89, 1), (397, 1), (683, 1), (2113, 1), (20857, 1), (312709, 1), (599479, 1), (4327489, 1)],
    [(127, 1), (524287, 1), (0x8102142852a54ad5ab5ebd7bf7f, 1)],
    [(3, 1), (7327657, 1), (193707721, 1), (761838257287, 1), (0x61b04216c33, 1)],
    [(7, 1), (31, 1), (73, 1), (151, 1), (271, 1), (631, 1), (23311, 1), (262657, 1), (348031, 1), (0x2d72ec879791, 1)],
    [(3, 1), (5, 1), (17, 2), (137, 1), (953, 1), (26317, 1), (43691, 1), (131071, 1), (354689, 1), (0x29e66824961, 1)],
    [(0x1bc894a5efde5b971, 1), (0x126d9df90b42f22186f, 1)],
    [(3, 2), (7, 1), (47, 1), (139, 1), (178481, 1), (2796203, 1), (168749965921, 1), (0x924925b6db7, 1)],
    [(0x51dd9dbc32f, 1), (0x19043ef56cca6ea8fda319c31, 1)],
    [(3, 1), (5, 2), (11, 1), (29, 1), (31, 1), (41, 1), (43, 1), (71, 1), (113, 1), (127, 1), (281, 1), (86171, 1), (122921, 1), (7416361, 1), (47392381, 1)],
    [(7, 1), (2351, 1), (4513, 1), (13264529, 1), (4375578271, 1), (0x8f97384b16239e9, 1)],
    [(3, 1), (228479, 1), (48544121, 1), (56409643, 1), (212885833, 1), (0xcb097a80581, 1)],
    [(23, 1), (89, 1), (8191, 1), (724153, 1), (158822951431, 1), (0x503e66e6e16f8c11, 1)],
    [(3, 3), (5, 1), (7, 1), (13, 1), (17, 1), (19, 1), (37, 1), (73, 1), (97, 1), (109, 1), (241, 1), (257, 1), (433, 1), (577, 1), (673, 1), (38737, 1), (487824887233, 1)],
    [(31, 1), (233, 1), (1103, 1), (2089, 1), (0x84210846318c6339ce739def7bdf, 1)],
    [(3, 1), (439, 1), (1753, 1), (2298041, 1), (0x883c1153d41, 1), (0x18ec61f0e8e0b323, 1)],
    [(7, 3), (127, 1), (337, 1), (0x40810204081, 1), (0x244925b49252490049237, 1)],
    [(3, 1), (5, 1), (149, 1), (223, 1), (593, 1), (1777, 1), (25781083, 1), (184481113, 1), (231769777, 1), (616318177, 1)],
    [(0x4b298e922ee1921ef, 1), (0x6cfda2bf2e119388fd2f1, 1)],
    [(3, 2), (7, 1), (11, 1), (31, 1), (151, 1), (251, 1), (331, 1), (601, 1), (1801, 1), (4051, 1), (100801, 1), (10567201, 1), (0x107fdef8021, 1)],
    [(18121, 1), (55871, 1), (165799, 1), (2332951, 1), (0x6078645e5a63722b9e4b9, 1)],
    [(3, 1), (5, 1), (17, 1), (229, 1), (457, 1), (1217, 1), (148961, 1), (174763, 1), (524287, 1), (525313, 1), (0x164c4ff76c51, 1)],
    [(7, 1), (73, 1), (103, 1), (919, 1), (2143, 1), (11119, 1), (131071, 1), (0x3e8536e8565ccbc95728ef, 1)],
    [(3, 1), (23, 1), (43, 1), (89, 1), (127, 1), (617, 1), (683, 1), (78233, 1), (35532364099, 1), (0x8112264cd9bb77f, 1)],
    [(31, 2), (311, 1), (11471, 1), (73471, 1), (2147483647, 1), (4649919401, 1), (0x1083c9a54a9f, 1)],
    [(3, 2), (5, 1), (7, 1), (13, 2), (53, 1), (79, 1), (157, 1), (313, 1), (1249, 1), (1613, 1), (2731, 1), (3121, 1), (8191, 1), (21841, 1), (121369, 1), (22366891, 1)],
    [(852133201, 1), (60726444167, 1), (0x1811d8a6209, 1), (0x79536c8eb4a71, 1)],
    [(3, 1), (2687, 1), (202029703, 1), (0x103413e6cb7, 1), (0x2aaaaaaaaaaaaaaaaaab, 1)],
    [(7, 1), (6361, 1), (6679, 1), (69431, 1), (13960201, 1), (20394401, 1), (540701761, 1), (229890275929, 1)],
    [(3, 1), (5, 2), (11, 1), (17, 1), (31, 1), (41, 1), (257, 1), (61681, 1), (65537, 1), (414721, 1), (4278255361, 1), (0x28741f88ac01, 1)],
    [(47, 1), (127, 1), (1289, 1), (178481, 1), (3188767, 1), (45076044553, 1), (0xcd82be41f9819351, 1)],
    [(3, 5), (7, 1), (19, 1), (73, 1), (163, 1), (2593, 1), (71119, 1), (87211, 1), (135433, 1), (262657, 1), (97685839, 1), (272010961, 1)],
    [(150287, 1), (704161, 1), (110211473, 1), (27669118297, 1), (0x1f6cc6e796f81d5c9, 1)],
    [(3, 1), (5, 1), (83, 1), (10169, 1), (13367, 1), (181549, 1), (12112549, 1), (43249589, 1), (164511353, 1), (8831418697, 1)],
    [(7, 1), (23, 1), (31, 1), (89, 1), (151, 1), (881, 1), (3191, 1), (201961, 1), (599479, 1), (0x1b1cd239b201b239a4727, 1)],
    [(3, 1), (167, 1), (499, 1), (1163, 1), (2657, 1), (155377, 1), (13455809771, 1), (0xc4372f855d824ca58e9, 1)],
    [(2349023, 1), (0x39233f1831293e724d944f759295c219d5be1, 1)],
    [(3, 2), (5, 1), (7, 2), (13, 1), (17, 1), (29, 1), (43, 1), (113, 1), (127, 1), (241, 1), (337, 1), (1429, 1), (3361, 1), (5419, 1), (14449, 1), (15790321, 1), (88959882481, 1)],
    [(4057, 1), (8191, 1), (0x6215b87c031, 1), (0x2a2a95cadcf0ee19df1a9a4db9, 1)],
    [(3, 1), (11, 1), (31, 1), (43691, 1), (131071, 1), (0x84214a52b5ad7bdf, 1), (0x1745c5d17a2e88ba3, 1)],
    [(7, 1), (73, 1), (32377, 1), (524287, 1), (1212847, 1), (93507247, 1), (0x2844e267e7858232cb3d7, 1)],
    [(3, 1), (5, 1), (173, 1), (431, 1), (9719, 1), (101653, 1), (500177, 1), (2099863, 1), (0x199998ccccd, 1), (0x2aaaaaaaaab, 1)],
    [(730753, 1), (1505447, 1), (0xf8fd6c8288fb07, 1), (0x20e20e984dd3d96be70f, 1)],
    [(3, 2), (7, 1), (59, 1), (233, 1), (1103, 1), (2089, 1), (4177, 1), (3033169, 1), (0x8f72eebe387, 1), (0x15555554aaaaaab, 1)],
    [(31, 1), (71, 1), (127, 1), (601, 1), (1801, 1), (39551, 1), (122921, 1), (60816001, 1), (0x715d40bd829492cd201f, 1)],
    [(3, 1), (5, 1), (17, 1), (23, 1), (89, 1), (257, 1), (353, 1), (397, 1), (683, 1), (2113, 1), (229153, 1), (119782433, 1), (2931542417, 1), (43872038849, 1)],
    [(7, 1), (179951, 1), (184081, 1), (27989941729, 1), (0x2e9db69cff1, 1), (0x7fdd5e49fcc05327, 1)],
    [(3, 1), (179, 1), (62020897, 1), (0x4206c0e73e7409, 1), (0x1ffffffffffffffffffffff, 1)],
    [(359, 1), (1433, 1), (0x104e5a80a157457abc6482776a0e7ee78c616da91, 1)],
    [(3, 3), (5, 2), (7, 1), (11, 1), (13, 1), (19, 1), (31, 1), (37, 1), (41, 1), (61, 1), (73, 1), (109, 1), (151, 1), (181, 1), (331, 1), (631, 1), (1321, 1), (23311, 1), (54001, 1), (18837001, 1), (29247661, 1)],
    [(43441, 1), (1164193, 1), (7648337, 1), (0x5f6150206cbaeb0a51284f6f516249f, 1)],
    [(3, 1), (43, 1), (127, 1), (911, 1), (2731, 1), (8191, 1), (224771, 1), (1210483, 1), (112901153, 1), (23140471537, 1), (25829691707, 1)],
    [(7, 1), (367, 1), (55633, 1), (0x1fffffffffffffff, 1), (0x7834883996202c2aab7ee269, 1)],
    [(3, 1), (5, 1), (17, 1), (47, 1), (277, 1), (1013, 1), (1657, 1), (30269, 1), (178481, 1), (2796203, 1), (0xf0f0f0f0f0f0f0f0f0f0f1, 1)],
    [(31, 1), (223, 1), (616318177, 1), (0x5a42576d55c57, 1), (0x176c12ed905937f6a3b5a7b9, 1)],
    [(3, 2), (7, 1), (529510939, 1), (715827883, 1), (2147483647, 1), (2903110321, 1), (0x924924936db6db7, 1)],
    [(23, 1), (89, 1), (131071, 1), (707983, 1), (0xbdabf2cddbdec98dd68a9906cc49096d691, 1)],
    [(3, 1), (5, 1), (283, 1), (2351, 1), (3761, 1), (4513, 1), (13264529, 1), (7484047069, 1), (165768537521, 1), (0x7fffff000001, 1)],
    [(7, 2), (73, 1), (127, 1), (337, 1), (92737, 1), (262657, 1), (649657, 1), (1560007, 1), (0xabbcb671934086d21ff5f7, 1)],
    [(3, 1), (11, 1), (31, 1), (191, 1), (2281, 1), (174763, 1), (524287, 1), (420778751, 1), (30327152671, 1), (0x29ca7493f1acd8ab, 1)],
    [(383, 1), (7068569257, 1), (39940132241, 1), (0x12e7bddf70521, 1), (0x4bb2d4cbc16cfe6e9, 1)],
    [(3, 2), (5, 1), (7, 1), (13, 1), (17, 1), (97, 1), (193, 1), (241, 1), (257, 1), (641, 1), (673, 1), (65537, 1), (6700417, 1), (22253377, 1), (0xffffffff00000001, 1)],
    [(13821503, 1), (0xd0e4b3d2cea3f40a56f, 1), (0x2f9a3e875747393d2f09274f, 1)],
    [(3, 1), (971, 1), (1553, 1), (11447, 1), (31817, 1), (0xf4718e7f062a309, 1), (0xb73493decfd9b68318ef9, 1)],
    [(7, 1), (31, 1), (79, 1), (151, 1), (8191, 1), (121369, 1), (0x8425296b5bdf, 1), (0x1b1f5d3ebab3b3b574fae9f27, 1)],
    [(3, 1), (5, 1), (29, 1), (43, 1), (113, 1), (127, 1), (197, 1), (19707683773, 1), (0x3f80fe03f81, 1), (0x40810204081, 1), (0x487eddbc091, 1)],
    [(7487, 1), (0x1181b149e3e4c85e5f1fb2507d481cb8c6dd39e358bad41, 1)],
    [(3, 3), (7, 1), (19, 1), (23, 1), (67, 1), (73, 1), (89, 1), (199, 1), (683, 1), (5347, 1), (20857, 1), (153649, 1), (599479, 1), (33057806959, 1), (0xdc3048aa1123, 1)],
    [(164504919713, 1), (0x357857e1c1fc34d6b12d8cd398b9b7ebd953e7a9f, 1)],
    [(3, 1), (5, 3), (11, 1), (17, 1), (31, 1), (41, 1), (101, 1), (251, 1), (401, 1), (601, 1), (1801, 1), (4051, 1), (8101, 1), (61681, 1), (268501, 1), (340801, 1), (2787601, 1), (3173389601, 1)],
    [(7, 1), (1609, 1), (22111, 1), (193707721, 1), (761838257287, 1), (0x44fc4539d00b0dc3480f3a32661, 1)],
    [(3, 1), (0x6c279f03a0f, 1), (0x4bbe4964e1a8b11, 1), (0xaaaaaaaaaaaaaaaaaaaaaaaab, 1)],
    [(127, 1), (233, 1), (1103, 1), (2089, 1), (136417, 1), (121793911, 1), (0x8898e565e58d448bd195b49c5821e59, 1)],
    [(3, 2), (5, 1), (7, 1), (13, 1), (103, 1), (137, 1), (307, 1), (409, 1), (953, 1), (2143, 1), (2857, 1), (3061, 1), (6529, 1), (11119, 1), (13669, 1), (26317, 1), (43691, 1), (131071, 1), (1326700741, 1)],
    [(31, 1), (13367, 1), (2940521, 1), (164511353, 1), (70171342151, 1), (0x2e2448e625b7b116cd46fd7841, 1)],
    [(3, 1), (2550183799, 1), (415141630193, 1), (0x7100eb84c5bf755b, 1), (0xd79331b1cd9080adb9, 1)],
    [(7, 1), (47, 1), (73, 1), (79903, 1), (178481, 1), (634569679, 1), (0x207d00e8eff, 1), (0x924925b6db7, 1), (0x2659a6356b97, 1)],
    [(3, 1), (5, 1), (17, 1), (53, 1), (157, 1), (257, 1), (1613, 1), (2731, 1), (8191, 1), (858001, 1), (308761441, 1), (0xff00ff00ff00ff00ff00ff01, 1)],
    [(23, 1), (89, 1), (524287, 1), (0x563923f99889, 1), (0x55f792d2cd36f, 1), (0x46c42c50808084c661aa9, 1)],
    [(3, 2), (7, 2), (11, 1), (31, 1), (43, 1), (71, 1), (127, 1), (151, 1), (211, 1), (281, 1), (331, 1), (337, 1), (5419, 1), (29191, 1), (86171, 1), (106681, 1), (122921, 1), (152041, 1), (664441, 1), (1564921, 1)],
    [(15193, 1), (0x344748e89698f3c89, 1), (0xa8fbb4898018b5f28b18299cf748c3a9f, 1)],
    [(3, 1), (5, 1), (107, 1), (6361, 1), (69431, 1), (15358129, 1), (20394401, 1), (586477649, 1), (0x19852f0d8ec1, 1), (0x6666664cccccd, 1)],
    [(7, 1), (66457, 1), (228479, 1), (48544121, 1), (212885833, 1), (0x278cd08de7b055c7, 1), (0x3a5c1d7cddcaa7b9, 1)],
    [(3, 1), (643, 1), (0x10fcaea5e3998c02a77b49eb9, 1), (0x7ffffffffffffffffffffffffff, 1)],
    [(31, 1), (431, 1), (1721, 1), (9719, 1), (2099863, 1), (731516431, 1), (514851898711, 1), (0xf6708ebd39a380cdecd6ef, 1)],
    [(3, 4), (5, 1), (7, 1), (13, 1), (17, 1), (19, 1), (37, 1), (73, 1), (109, 1), (241, 1), (433, 1), (38737, 1), (87211, 1), (246241, 1), (262657, 1), (279073, 1), (33975937, 1), (0x7e697b0bd181, 1)],
    [(127, 1), (5209, 1), (62497, 1), (2147483647, 1), (0x153d3be36cf98b6547f, 1), (0x5022aaa5f4a4e9f903c9, 1)],
    [(3, 1), (104124649, 1), (745988807, 1), (0xb83cbeccdc926056c109, 1), (0x1b7fb6ca4d87aa3770273, 1)],
    [(7, 1), (439, 1), (3943, 1), (2298041, 1), (0x883c1153d41, 1), (0x95075d42c725f29, 1), (0x10509ea19e5e9f126c9, 1)],
    [(3, 1), (5, 2), (11, 2), (23, 1), (31, 1), (41, 1), (89, 1), (397, 1), (683, 1), (881, 1), (2113, 1), (2971, 1), (3191, 1), (201961, 1), (48912491, 1), (415878438361, 1), (0x34d3326680d, 1)],
    [(1327, 1), (8191, 1), (131071, 1), (0x18b24d93fde40bad95f2f56d9d8916eb26f35b891cbe31, 1)],
    [(3, 2), (7, 1), (223, 1), (1777, 1), (3331, 1), (17539, 1), (321679, 1), (25781083, 1), (26295457, 1), (319020217, 1), (616318177, 1), (0x62056060c093, 1)],
    [(18287, 1), (196687, 1), (1466449, 1), (2916841, 1), (0x4fa957eb6e9eb9aaa1, 1), (0x7e426048db98f7ad2d57, 1)],
    [(3, 1), (5, 1), (17, 1), (29, 1), (43, 1), (113, 1), (127, 1), (257, 1), (449, 1), (2689, 1), (5153, 1), (65537, 1), (15790321, 1), (183076097, 1), (54410972897, 1), (0x145fd73cb5ec1, 1)],
    [(7, 1), (31, 1), (73, 1), (151, 1), (601, 1), (631, 1), (1801, 1), (23311, 1), (100801, 1), (115201, 1), (617401, 1), (10567201, 1), (1348206751, 1), (0x313ed7a898cdd7, 1)],
    [(3, 1), (227, 1), (3391, 1), (23279, 1), (48817, 1), (65993, 1), (1868569, 1), (636190001, 1), (0x3ca43f3d97c6f, 1), (0x6d064f6854ef3b9, 1)],
    [(0x5fdfed62595479, 1), (0x155c784c845ff0b4ac9fb257cab00e8762c453cb2a37, 1)],
    [(3, 2), (5, 1), (7, 1), (13, 1), (229, 1), (457, 1), (571, 1), (32377, 1), (131101, 1), (160969, 1), (174763, 1), (524287, 1), (525313, 1), (1212847, 1), (160465489, 1), (275415303169, 1)],
    [(1504073, 1), (20492753, 1), (0xd4923669e20bc7, 1), (0x15fee101f81a2b4f54ab0691b734b7bf1, 1)],
    [(3, 1), (11, 1), (31, 1), (47, 1), (691, 1), (14951, 1), (178481, 1), (2796203, 1), (4036961, 1), (1884103651, 1), (0x13a793e2b023b, 1), (0x966fc18022f69, 1)],
    [(7, 2), (23, 1), (89, 1), (127, 1), (337, 1), (463, 1), (599479, 1), (0x8112264cd9bb77f, 1), (0xf5a6b315159afdd33c14321357c9, 1)],
    [(3, 1), (5, 1), (17, 1), (59, 1), (233, 1), (1103, 1), (2089, 1), (59393, 1), (3033169, 1), (107367629, 1), (536903681, 1), (0x109dc950da32fc88e84d688f1, 1)],
    [(1399, 1), (135607, 1), (622577, 1), (0x4c429036602121c057e1bfa2bac5eda6fe9519726ff5dff, 1)],
    [(3, 3), (7, 1), (19, 1), (73, 1), (79, 1), (937, 1), (2731, 1), (6553, 1), (8191, 1), (86113, 1), (121369, 1), (22366891, 1), (7830118297, 1), (0x11f7047dc0fb823ee09, 1)],
    [(31, 1), (2351, 1), (4513, 1), (13264529, 1), (2391314881, 1), (72296287361, 1), (0xe1926ed6128547b6bb60d4f57721f, 1)],
    [(3, 1), (5, 1), (1181, 1), (2833, 1), (3541, 1), (37171, 1), (157649, 1), (174877, 1), (179951, 1), (5521693, 1), (1824726041, 1), (104399276341, 1), (0x2e9db69cff1, 1)],
    [(7, 1), (1423, 1), (2687, 1), (49297, 1), (202029703, 1), (0x103413e6cb7, 1), (0x1494db743874c043f, 1), (0x1b32bc4fbfeee9177, 1)],
    [(3, 1), (43, 1), (127, 1), (239, 1), (20231, 1), (43691, 1), (131071, 1), (823679683, 1), (62983048367, 1), (131105292137, 1), (0x7c2c78f98ab3c5141, 1)],
    [(479, 1), (1913, 1), (5737, 1), (176383, 1), (134000609, 1), (0x4dd67d1493fea12958c3add8582f926b6ef55ab9f, 1)],
    [(3, 2), (5, 2), (7, 1), (11, 1), (13, 1), (17, 1), (31, 1), (41, 1), (61, 1), (97, 1), (151, 1), (241, 1), (257, 1), (331, 1), (673, 1), (1321, 1), (61681, 1), (394783681, 1), (4278255361, 1), (4562284561, 1), (46908728641, 1)],
    [(22000409, 1), (0x18671be8a0f2d03da7c731ed61ec65beded6639928a4035308e06d7, 1)],
    [(3, 1), (23, 1), (89, 1), (683, 1), (727, 1), (117371, 1), (0x23b7cea2fc7b5aae1c22ecb3, 1), (0x168c2661efceb3c3748ef748e7, 1)],
    [(7, 1), (73, 1), (487, 1), (2593, 1), (71119, 1), (262657, 1), (97685839, 1), (0xf3ccb523cf1, 1), (0xaf81b9f82201, 1), (0x338730e1971add47, 1)],
    [(3, 1), (5, 1), (733, 1), (1709, 1), (3456749, 1), (368140581013, 1), (667055378149, 1), (0xaaaaaaaaaaaaaab, 1), (0x1fffffffffffffff, 1)],
    [(31, 1), (71, 1), (127, 1), (1471, 1), (122921, 1), (0x40810204081, 1), (0x2c34359a0a0cf6f34c64f2ed12f7fef3ff4dcabf, 1)],
    [(3, 2), (7, 1), (83, 1), (739, 1), (13367, 1), (165313, 1), (3887047, 1), (164511353, 1), (8831418697, 1), (0x2ee02988427bd9, 1), (0x2776572c79ed291, 1)],
    [(8191, 1), (15809, 1), (524287, 1), (0x5dffc61f799, 1), (0x16d9edff3d3df, 1), (0x3f3f6a6df6aaf53391d306a553c9, 1)],
    [(3, 1), (5, 1), (17, 1), (5581, 1), (8681, 1), (49477, 1), (290657, 1), (384773, 1), (715827883, 1), (2147483647, 1), (3770202641, 1), (0x3de3499af7082c6981, 1)],
    [(7, 1), (167, 1), (1621324657, 1), (0xc4372f855d824ca58e9, 1), (0x183849667bffb90318de04d5837d2f8fa7, 1)],
    [(3, 1), (11, 1), (31, 1), (251, 1), (601, 1), (1801, 1), (4051, 1), (229668251, 1), (269089806001, 1), (0x41606b48636df251, 1), (0x12b363f587d62c8e893, 1)],
    [(503, 1), (54217, 1), (0x9a9712deaaa1684a7, 1), (0xd0f82af0d961c52eeb7, 1), (0x9fc017ceb027aae561591, 1)],
    [(3, 3), (5, 1), (7, 2), (13, 1), (19, 1), (29, 1), (37, 1), (43, 1), (73, 1), (109, 1), (113, 1), (127, 1), (337, 1), (1429, 1), (5419, 1), (14449, 1), (92737, 1), (649657, 1), (40388473189, 1), (77158673929, 1), (118750098349, 1)],
    [(23, 2), (47, 1), (89, 1), (178481, 1), (4103188409, 1), (0x2a57bb0909385b4233a9, 1), (0x233c9292d6315aeb68bfa2aed39, 1)],
    [(3, 1), (0x2aaaaaaaaaaaaaaaaaaaaaaaaaaaaaab, 1), (0x7fffffffffffffffffffffffffffffff, 1)],
    [(7, 1), (31, 1), (103, 1), (151, 1), (2143, 1), (11119, 1), (106591, 1), (131071, 1), (949111, 1), (0x84214a52b5ad7bdf, 1), (0x126cf51772d253cba3f5a7cf, 1)],
    [(3, 1), (5, 1), (17, 1), (257, 1), (641, 1), (65537, 1), (274177, 1), (6700417, 1), (0x3d30f19cd101, 1), (0xd3eafc3af14601, 1), (0x13540775b48cc32ba01, 1)],
    [(0x1e695d2db4f97, 1), (0xf4b9d4b015271182ac89, 1), (0x119c7d242f69f19a967903f450593e4d1, 1)],
    [(3, 2), (7, 1), (431, 1), (1033, 1), (9719, 1), (2099863, 1), (1591582393, 1), (0x2aaaaaaaaab, 1), (0xe445270ed2b, 1), (0x924924924936db6db6db7, 1)],
    [(127, 1), (223, 1), (616318177, 1), (2499285769, 1), (0xddb27a334c500ee2f71929524d3d07effcc4ceeb44b847, 1)],
    [(3, 1), (5, 2), (11, 1), (31, 1), (41, 1), (53, 1), (131, 1), (157, 1), (521, 1), (1613, 1), (2731, 1), (8191, 1), (51481, 1), (409891, 1), (7623851, 1), (34110701, 1), (0x625a8944af99, 1), (0x8425296b5bdf, 1)],
    [(7, 1), (73, 1), (233, 1), (1103, 1), (2089, 1), (4177, 1), (0x8f72eebe387, 1), (0xe070381c0e070381c0e071f8fc7e3f1f8fc7e3f1f9, 1)],
    [(3, 1), (263, 1), (1049, 1), (4744297, 1), (0x24d24c653651d39d24d7c89eb, 1), (0x7c97d9108c2ad4329db02eb8f166349, 1)],
    [(23671, 1), (0xc580a018d19, 1), (0x6372ec106fa992bcccb667, 1), (0x49e71c03269cc9423cd83ec918f5b7, 1)],
    [(3, 2), (5, 1), (7, 1), (13, 1), (17, 1), (23, 1), (67, 1), (89, 1), (241, 1), (353, 1), (397, 1), (683, 1), (2113, 1), (7393, 1), (20857, 1), (312709, 1), (599479, 1), (4327489, 1), (1761345169, 1), (2931542417, 1), (98618273953, 1)],
    [(31, 1), (6361, 1), (69431, 1), (20394401, 1), (29324808311, 1), (0xb3d9f74f6201, 1), (0x1b8b9f00e8e68db5068b1a01f7d85fd9, 1)],
    [(3, 1), (43, 1), (127, 1), (4523, 1), (174763, 1), (524287, 1), (0x1590d3418c2fca7c59187de89, 1), (0x8102142852a54ad5ab5ebd7bf7f, 1)],
    [(7, 1), (78903841, 1), (0x1a26a66715df, 1), (0x1ffffffffffffffffffffff, 1), (0x1307dec1550991bae842891e809, 1)],
    [(3, 1), (5, 1), (269, 1), (7327657, 1), (15152453, 1), (42875177, 1), (193707721, 1), (2559066073, 1), (761838257287, 1), (0x61b04216c33, 1), (0x8db9a35158d, 1)],
    [(13822297, 1), (0x26d74762f798ad0f20fe6daa579260b4889d21837f975a12c636f0421b3117, 1)],
    [(3, 4), (7, 1), (11, 1), (19, 1), (31, 1), (73, 1), (151, 1), (271, 1), (331, 1), (631, 1), (811, 1), (15121, 1), (23311, 1), (87211, 1), (262657, 1), (348031, 1), (18837001, 1), (0x2d72ec879791, 1), (0x15eeb0f3c5353, 1)],
    [(15242475217, 1), (0x24113e637db5db537dcf015e0055f51b24c8986152b40010c4dfc9539dcf, 1)],
    [(3, 1), (5, 1), (17, 2), (137, 1), (257, 1), (953, 1), (26317, 1), (43691, 1), (131071, 1), (354689, 1), (383521, 1), (0x22762832c81, 1), (0x29e66824961, 1), (0x143b334fc8f7296c61, 1)],
    [(7, 2), (79, 1), (127, 1), (337, 1), (911, 1), (8191, 1), (121369, 1), (108749551, 1), (112901153, 1), (23140471537, 1), (0xe8abf8ca9d9e9, 1), (0x4b70e7e8e08ba3601, 1)],
    [(3, 1), (1097, 1), (15619, 1), (0x722436734f7461, 1), (0x176ce109c57f111, 1), (0x1bc894a5efde5b971, 1), (0x126d9df90b42f22186f, 1)],
    [(23, 1), (31, 1), (89, 1), (601, 1), (881, 1), (1801, 1), (3191, 1), (201961, 1), (0x14b5b2e95ed1a4f84f, 1), (0xbf99b8d380e972d0969a1627a95ab48cf, 1)],
    [(3, 2), (5, 1), (7, 1), (13, 1), (47, 1), (139, 1), (277, 1), (1013, 1), (1657, 1), (30269, 1), (178481, 1), (2796203, 1), (168749965921, 1), (0x4ecec589ec5, 1), (0x924925b6db7, 1), (0x3ff8007ff001, 1)],
    [(1121297, 1), (0x176c1ec84d45d5a8f4d2104c9aa962f1, 1), (0x147118e9d568ccee47b685830f40ceedff, 1)],
    [(3, 1), (4506937, 1), (0x51dd9dbc32f, 1), (0x19043ef56cca6ea8fda319c31, 1), (0x9ed3f92869c114d8f8b0ded223303, 1)],
    [(7, 1), (73, 1), (16183, 1), (34039, 1), (1437967, 1), (2147483647, 1), (0x2f6467a003e6f, 1), (0x924924936db6db7, 1), (0x1aecf345d6f80d83e7de9, 1)],
    [(3, 1), (5, 2), (11, 1), (17, 1), (29, 1), (31, 1), (41, 1), (43, 1), (71, 1), (113, 1), (127, 1), (281, 1), (61681, 1), (86171, 1), (122921, 1), (7416361, 1), (15790321, 1), (47392381, 1), (0x10fffeeef011110feeef00011, 1)],
    [(80929, 1), (0x19e9d9ce852acd5a5a35c4eaa034f0bff8ea0e7187964bd94b554c27d831862b81f, 1)],
    [(3, 2), (7, 1), (283, 1), (2351, 1), (4513, 1), (1681003, 1), (13264529, 1), (4375578271, 1), (35273039401, 1), (111349165273, 1), (165768537521, 1), (0x8f97384b16239e9, 1)],
    [(9623, 1), (68492481833, 1), (0x36a9d25e8bdabf9ef3c85a6cd73bc1ffb9ddffedcb64fe2471524b2e131, 1)],
    [(3, 1), (5, 1), (569, 1), (228479, 1), (48544121, 1), (56409643, 1), (148587949, 1), (212885833, 1), (4999465853, 1), (5585522857, 1), (472287102421, 1), (0xcb097a80581, 1)],
    [(7, 1), (31, 1), (151, 1), (191, 1), (32377, 1), (524287, 1), (1212847, 1), (420778751, 1), (30327152671, 1), (0x50da66ddc67c7d9a9f, 1), (0x55e2f6a4e4d33745679, 1)],
    [(3, 1), (23, 1), (89, 1), (683, 1), (2003, 1), (2731, 1), (8191, 1), (724153, 1), (6156182033, 1), (10425285443, 1), (158822951431, 1), (0xe18fd10fe6b, 1), (0x503e66e6e16f8c11, 1)],
    [(127, 1), (13367, 1), (164511353, 1), (17137716527, 1), (0x2054cfde4861eb8472ea804128fb3954b09f3a9dd55ff743beb1, 1)],
    [(3, 3), (5, 1), (7, 1), (13, 1), (17, 1), (19, 1), (37, 1), (73, 1), (97, 1), (109, 1), (193, 1), (241, 1), (257, 1), (433, 1), (577, 1), (673, 1), (1153, 1), (6337, 1), (38737, 1), (65537, 1), (22253377, 1), (38941695937, 1), (278452876033, 1), (487824887233, 1)],
    [(131071, 1), (12761663, 1), (0x25eac5447e188f2ce1a1, 1), (0x8e046a37265a7f0a78eb2dd32ece5883b576fd29b5f, 1)],
    [(3, 1), (11, 1), (31, 1), (59, 1), (233, 1), (1103, 1), (2089, 1), (3033169, 1), (7553921, 1), (0x33b047d5b84493d1850d123, 1), (0x84210846318c6339ce739def7bdf, 1)],
    [(7, 1), (11447, 1), (272959, 1), (2065304407, 1), (5434876633, 1), (0xb73493decfd9b68318ef9, 1), (0x39b87557733c6a7622acb5cc60b7, 1)],
    [(3, 1), (5, 1), (293, 1), (439, 1), (1753, 1), (9929, 1), (2298041, 1), (0x883c1153d41, 1), (0x24e8955e81bc1, 1), (0x18ec61f0e8e0b323, 1), (0x1ffffffffe000000001, 1)],
    [(0x21303da081dc022c2688b1, 1), (0xf6d53af36b5117983b218804b2752552c6bc00b51c36f7953faf, 1)],
    [(3, 2), (7, 3), (43, 1), (127, 1), (337, 1), (5419, 1), (748819, 1), (0x3f80fe03f81, 1), (0x40810204081, 1), (0x1694763bf8ce3f29b, 1), (0x244925b49252490049237, 1)],
    [(31, 1), (4721, 1), (132751, 1), (179951, 1), (5794391, 1), (128818831, 1), (3812358161, 1), (0x2e9db69cff1, 1), (0x19bd771abbfd7, 1), (0xef1e9409edb554a44f, 1)],
    [(3, 1), (5, 1), (17, 1), (149, 1), (223, 1), (593, 1), (1777, 1), (25781083, 1), (184481113, 1), (231769777, 1), (616318177, 1), (0xf0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f1, 1)],
    [(7, 1), (23, 1), (73, 1), (89, 1), (199, 1), (153649, 1), (262657, 1), (599479, 1), (8950393, 1), (33057806959, 1), (0x1deed22da4f19d297e3768e5a2bd73d40a05a5c9, 1)],
    [(3, 1), (1193, 1), (650833, 1), (38369587, 1), (0x4b298e922ee1921ef, 1), (0x6cfda2bf2e119388fd2f1, 1), (0x19ccac41cbf213e6e6fa6eb1, 1)],
    [(47, 1), (599, 1), (8191, 1), (178481, 1), (9341359, 1), (14718679249, 1), (0xba94607373f31627, 1), (0x2c9e525232569355f, 1), (0xe1b96e9309f9c93ff, 1)],
    [(3, 2), (5, 3), (7, 1), (11, 1), (13, 1), (31, 1), (41, 1), (61, 1), (101, 1), (151, 1), (251, 1), (331, 1), (601, 1), (1201, 1), (1321, 1), (1801, 1), (4051, 1), (8101, 1), (63901, 1), (100801, 1), (268501, 1), (10567201, 1), (13334701, 1), (1182468601, 1), (0x107fdef8021, 1)],
    [(127, 1), (431, 1), (9719, 1), (490631, 1), (2099863, 1), (0x4d661c439531a6a87977, 1), (0x38ff0c3ea9788d018360b8228bdc9d46900413f, 1)],
    [(3, 1), (18121, 1), (55871, 1), (165799, 1), (2332951, 1), (0x11061024f8d1, 1), (0x6078645e5a63722b9e4b9, 1), (0x2819dad4c9a6e3cf008d314cabb, 1)],
    [(7, 1), (607, 1), (0x6c279f03a0f, 1), (0x4bbe4964e1a8b11, 1), (0x3db20984f878045684ab5978723ba5a0340e380831a543a9, 1)],
    [(3, 1), (5, 1), (17, 1), (229, 1), (257, 1), (457, 1), (1217, 1), (27361, 1), (148961, 1), (174763, 1), (524287, 1), (525313, 1), (0x164c4ff76c51, 1), (0xf689e4e5554381, 1), (0x27a3bfb184ccb84c4a1, 1)],
    [(31, 1), (1831, 1), (2441, 1), (4271, 1), (270841, 1), (0x1b84368d31607, 1), (0x1fffffffffffffff, 1), (0x42ecae94e4e90394cb70d0114cfea685c81, 1)],
    [(3, 3), (7, 1), (19, 1), (73, 1), (103, 1), (307, 1), (919, 1), (2143, 1), (2857, 1), (6529, 1), (11119, 1), (43691, 1), (123931, 1), (131071, 1), (26159806891, 1), (0x18f4ab222501, 1), (0x3e8536e8565ccbc95728ef, 1)],
    [(14608903, 1), (85798519, 1), (23487583303, 1), (78952752017, 1), (0x49330001970486f18c7f26f7bc31d21147a01f8ea496a39, 1)],
    [(3, 1), (5, 1), (23, 1), (29, 1), (43, 1), (89, 1), (113, 1), (127, 1), (397, 1), (617, 1), (683, 1), (2113, 1), (8317, 1), (78233, 1), (869467061, 1), (3019242689, 1), (35532364099, 1), (0x45359c6c0f65, 1), (0x8112264cd9bb77f, 1)],
    [(7, 1), (2550183799, 1), (0x69e31ae0812124cfc7, 1), (0xd79331b1cd9080adb9, 1), (0x161ab9f1c4ecb2ecaa32d10c548dec5291, 1)],
    [(3, 1), (11, 1), (31, 2), (311, 1), (11161, 1), (11471, 1), (73471, 1), (715827883, 1), (2147483647, 1), (4649919401, 1), (0x1083c9a54a9f, 1), (0x1521504946c183, 1), (0x6779fe60294309, 1)],
    [(5344847, 1), (0x216b043b1eaa9ffea4c5c980d7, 1), (0xc05e4e03bf32e1ba9d4e3ddf629a946a5409c1f01f5fc17, 1)],
    [(3, 2), (5, 1), (7, 1), (13, 2), (17, 1), (53, 1), (79, 1), (157, 1), (241, 1), (313, 1), (1249, 1), (1613, 1), (2731, 1), (3121, 1), (8191, 1), (21841, 1), (121369, 1), (858001, 1), (22366891, 1), (308761441, 1), (0x10fef010fef00fef010fef011, 1)],
    [(10960009, 1), (0x348994bc5ab471, 1), (0x330caf278e340af404391, 1), (0x4acf4c01bee737a16cd956396c6d7036ee1d547, 1)],
    [(3, 1), (15073, 1), (2350291, 1), (852133201, 1), (60726444167, 1), (0x1811d8a6209, 1), (0x79536c8eb4a71, 1), (0x3f11273d03a829, 1), (0x53fd4fc939fcd5fc1, 1)],
    [(7, 2), (31, 1), (71, 1), (73, 1), (127, 1), (151, 1), (337, 1), (631, 1), (23311, 1), (29191, 1), (92737, 1), (106681, 1), (122921, 1), (152041, 1), (649657, 1), (870031, 1), (983431, 1), (0x177395752cc9c65f679f88ce0e1, 1)],
    [(3, 1), (5, 1), (317, 1), (2687, 1), (202029703, 1), (0x103413e6cb7, 1), (0x14ac7f45efafe392d1, 1), (0x2aaaaaaaaaaaaaaaaaab, 1), (0x7fffffffff0000000001, 1)],
    [(9511, 1), (0x8273155eb2ee747, 1), (0x406dd75747c1f4fcb31c9, 1), (0x6b7547c5e9897fee059b3155c4abe02dda022e6d7, 1)],
    [(3, 2), (7, 1), (107, 1), (6043, 1), (6361, 1), (6679, 1), (69431, 1), (13960201, 1), (20394401, 1), (540701761, 1), (229890275929, 1), (0x19852f0d8ec1, 1), (0xe75bdb746d85c4b84ebd231, 1)],
    [(23, 1), (89, 1), (233, 1), (1103, 1), (2089, 1), (18503, 1), (64439, 1), (84819793631, 1), (0x175be55239d5c681f559cf3c2d780e0eb1df1e8265a92da213a321, 1)],
    [(3, 1), (5, 2), (11, 1), (17, 1), (31, 1), (41, 1), (257, 1), (641, 1), (61681, 1), (65537, 1), (414721, 1), (3602561, 1), (6700417, 1), (4278255361, 1), (0x28741f88ac01, 1), (0x4a832c756c4b78084e13ce14781, 1)],
    [(7, 1), (0x103fd19b4a9f, 1), (0x7ffffffffffffffffffffffffff, 1), (0x900a9bcc3b5176342a13dfb0a75009a694c59f9de9, 1)],
    [(3, 1), (43, 1), (47, 1), (127, 1), (1289, 1), (178481, 1), (2796203, 1), (3188767, 1), (45076044553, 1), (0xcd82be41f9819351, 1), (0x17d05f11dc47d05f40be82fb88ee20be83, 1)],
    [(647, 1), (7753, 1), (131071, 1), (524287, 1), (0x21dd96d73dada53d9, 1), (0xca43ea50055bed67bc25bb146cb8edf384cb5535d0b4280ae9, 1)],
    [(3, 5), (5, 1), (7, 1), (13, 1), (19, 1), (37, 1), (73, 1), (109, 1), (163, 1), (2593, 1), (71119, 1), (87211, 1), (135433, 1), (246241, 1), (262657, 1), (279073, 1), (3618757, 1), (97685839, 1), (106979941, 1), (168410989, 1), (272010961, 1), (4977454861, 1)],
    [(31, 1), (601, 1), (1801, 1), (7151, 1), (8191, 1), (51879585551, 1), (0x8425296b5bdf, 1), (0xbc290f766309e28d962b182392e454535e6c044d0fb9f3e1, 1)],
    [(3, 1), (150287, 1), (704161, 1), (110211473, 1), (11281292593, 1), (27669118297, 1), (0x3a2c6733704e3, 1), (0x1f6cc6e796f81d5c9, 1), (0x477bbc6c10eb483564e9, 1)],
    [(7, 1), (745988807, 1), (0x11dd83a0f93463887, 1), (0x70572394d0b10d73f9f, 1), (0x12a8c97365dd1b2bfd0f, 1), (0xb83cbeccdc926056c109, 1)],
    [(3, 1), (5, 1), (17, 1), (83, 1), (10169, 1), (13121, 1), (13367, 1), (181549, 1), (12112549, 1), (43249589, 1), (164511353, 1), (8562191377, 1), (8831418697, 1), (0x25bab4ab0d64f0cfd06f71e9c5ba1, 1)],
    [(127, 1), (2351, 1), (4513, 1), (12503, 1), (200033, 1), (9106063, 1), (13264529, 1), (270447871, 1), (0x19523fdc0dfc351347f2837872169bf2cbf4243f5b26ad749, 1)],
    [(3, 2), (7, 1), (11, 2), (23, 1), (31, 1), (67, 1), (89, 1), (151, 1), (331, 1), (683, 1), (881, 1), (2971, 1), (3191, 1), (20857, 1), (201961, 1), (599479, 1), (48912491, 1), (415365721, 1), (0x8004c4d05991b, 1), (0x1b1cd239b201b239a4727, 1)],
    [(0xf678b1097df, 1), (0x312d22af002ef, 1), (0x2b418fb872742d2eaced605a3ee82fe7cb62d0414134b9e481f75be78e2f, 1)],
    [(3, 1), (5, 1), (167, 1), (499, 1), (997, 1), (1163, 1), (2657, 1), (155377, 1), (13063537, 1), (13455809771, 1), (46202197673, 1), (209957719973, 1), (0x20e0a54de5e8f1d, 1), (0xc4372f855d824ca58e9, 1)],
    [(7, 1), (73, 1), (223, 1), (1999, 1), (10657, 1), (169831, 1), (321679, 1), (1238761, 1), (26295457, 1), (36085879, 1), (199381087, 1), (319020217, 1), (616318177, 1), (698962539799, 1), (0x38d98d2cc9061c67, 1)],
    [(3, 1), (2349023, 1), (0x39233f1831293e724d944f759295c219d5be1, 1), (0x2aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab, 1)],
    [(31, 1), (464311, 1), (193707721, 1), (1532217641, 1), (761838257287, 1), (0x3446d95d5adad9fa210d652046ff5f65c8abb7c19bde39f602c071, 1)],
    [(3, 2), (5, 1), (7, 2), (13, 1), (17, 1), (29, 1), (43, 1), (97, 1), (113, 1), (127, 1), (241, 1), (257, 1), (337, 1), (673, 1), (1429, 1), (2017, 1), (3361, 1), (5153, 1), (5419, 1), (14449, 1), (15790321, 1), (25629623713, 1), (54410972897, 1), (88959882481, 1), (0x57758499f6781, 1)],
    [(18199, 1), (2806537, 1), (95763203297, 1), (726584894969, 1), (0x2ec0ad3350f7440a30d371170340e560d72f9dc573f2df8659f5f56b9, 1)],
    [(3, 1), (2731, 1), (4057, 1), (8191, 1), (0x6215b87c031, 1), (0x446a8fb863ec3e13, 1), (0x3bdc8ba166460f299befdc1b, 1), (0x2a2a95cadcf0ee19df1a9a4db9, 1)],
    [(7, 1), (3391, 1), (23279, 1), (65993, 1), (1868569, 1), (10113049, 1), (0x3ca43f3d97c6f, 1), (0x108b7370a72acf903929be7, 1), (0xeab163644b4950c7471257a91559, 1)],
    [(3, 1), (5, 2), (11, 1), (31, 1), (41, 1), (137, 1), (953, 1), (1021, 1), (4421, 1), (26317, 1), (43691, 1), (131071, 1), (550801, 1), (23650061, 1), (0x644b1f3818f9ce19, 1), (0x84214a52b5ad7bdf, 1), (0x1745c5d17a2e88ba3, 1)],
    [(23, 1), (89, 1), (2147483647, 1), (0x4d2988ad6e35eebf, 1), (0x1adf531e58eb4653244f, 1), (0xfcf8aacb5ba31ecb316d254731420ac47d7e0fef, 1)],
    [(3, 3), (7, 1), (19, 2), (73, 1), (571, 1), (32377, 1), (174763, 1), (524287, 1), (1212847, 1), (93507247, 1), (160465489, 1), (0x2844e267e7858232cb3d7, 1), (0xf20db5c6cbc28a0bd1ab6034f3, 1)],
    [(127, 1), (6073159, 1), (1428389887, 1), (62228099977, 1), (0x40810204081, 1), (0x24b12849e3b836e9699b74031be24fc7582ea52c35554b430e01, 1)],
    [(3, 1), (5, 1), (17, 1), (173, 1), (431, 1), (9719, 1), (101653, 1), (500177, 1), (2099863, 1), (3855260977, 1), (0x199998ccccd, 1), (0x2aaaaaaaaab, 1), (0xe3aa6068ef6fe1, 1), (0x12dd4038671f778f3abe1, 1)],
    [(7, 1), (31, 1), (47, 1), (151, 1), (14951, 1), (178481, 1), (4036961, 1), (0x924925b6db7, 1), (0x966fc18022f69, 1), (0x1b20360a2c145828b12a625312a628b05160a2c137f27, 1)],
    [(3, 1), (347, 1), (4153, 1), (730753, 1), (1505447, 1), (35374479827, 1), (47635010587, 1), (0xf8fd6c8288fb07, 1), (0x20e20e984dd3d96be70f, 1), (0x15c0460198604f187d739, 1)],
    [(0x2feb42d6c6729b0a537, 1), (0x2abd21e634dbe8c9c27a9d9c8af63e5b3f1cdfadbb1f12a1a264596b2b3919ca1df79, 1)],
    [(3, 2), (5, 1), (7, 1), (13, 1), (59, 1), (233, 1), (349, 1), (1103, 1), (2089, 1), (4177, 1), (29581, 1), (3033169, 1), (107367629, 1), (536903681, 1), (27920807689, 1), (0x8f72eebe387, 1), (0x4ec3b13d89cec5, 1), (0x15555554aaaaaab, 1)],
    [(0x19e6eb6b6df, 1), (0x1b63ba6a848bd1fda520ba7afdf, 1), (0xb8c0b74ededd033ec5fc99abecd7781a355c5975626f0f12d3f, 1)],
    [(3, 1), (11, 1), (31, 1), (43, 1), (71, 1), (127, 1), (251, 1), (281, 1), (601, 1), (1051, 1), (1801, 1), (4051, 1), (39551, 1), (86171, 1), (110251, 1), (122921, 1), (60816001, 1), (347833278451, 1), (0x78d3f1b7eb8c83, 1), (0x715d40bd829492cd201f, 1)],
    [(7, 1), (73, 1), (79, 1), (937, 1), (6553, 1), (8191, 1), (86113, 1), (121369, 1), (262657, 1), (446473, 1), (29121769, 1), (7830118297, 1), (0x20821b9c2c53f, 1), (0x14cf14dd21dd14f, 1), (0x82d386d07c2767b61, 1)],
    [(3, 1), (5, 1), (17, 1), (23, 1), (89, 1), (257, 1), (353, 1), (397, 1), (683, 1), (2113, 1), (65537, 1), (229153, 1), (5304641, 1), (119782433, 1), (2931542417, 1), (43872038849, 1), (0x329a65c363e749478696a34069516539ec1, 1)],
]

def z_factor(n):
    """Factor the number n (>= 1) into its prime factors, with multiplicity."""
    if n & (n+1) == 0:
        return POW2MINUS1_FACTORS[n.bit_length()]
    ret = []
    def addfac(p):
        if len(ret) and ret[-1][0] == p:
            ret[-1][1] += 1
        else:
            ret.append([p, 1])
    p = 2
    while p * p <= n:
        if n % p == 0:
            addfac(p)
            n //= p
        else:
            p += 1 + (p & 1)
    if n > 1: addfac(n)
    return [tuple(v) for v in ret]

def z_divisors(n):
    factors = z_factor(n)
    ret = []
    def rec(i, v):
        if i == len(factors):
            ret.append(v)
        else:
            for p in range(factors[i][1] + 1):
                rec(i + 1, v)
                v *= factors[i][0]
    rec(0, 1)
    return sorted(ret)

def poly_degree(gf, p):
    """Get the degree of polynomial p over field gf."""
    if p == 0: return 0
    return (p.bit_length() - 1) // gf.BITS

def vec_get(gf, p, n):
    """Get the nth element of vector p over field gf.

    As vectors are represented as vectors of coefficients, this also gets the
    nth degree coefficient of a polynomial p."""
    return (p >> (n * gf.BITS)) & ((1 << gf.BITS) - 1)

def poly_make(gf, lst):
    """Make a polynomial from a list of coefficients (low to high)."""
    ret = 0
    for i, v in enumerate(lst):
        ret |= v << (gf.BITS * i)
    return ret

def vec_mul(gf, p, v):
    """Multiply vector p over field gf with field element v."""
    if v == 0: return 0
    if v == 1: return p
    ret = 0
    for d in range(poly_degree(gf, p) + 1):
        ret |= gf.mul(v, vec_get(gf, p, d)) << (gf.BITS * d)
    return ret

def poly_mul(gf, a, b):
    """Multiply two polynomials over field gf."""
    ret = 0
    if a == 0 or b == 0: return 0
    if a == 1: return b
    if b == 1: return a
    if poly_degree(gf, a) > poly_degree(gf, b):
        a, b = b, a
    for d in range(poly_degree(gf, a) + 1):
        ret ^= vec_mul(gf, b, vec_get(gf, a, d)) << (gf.BITS * d)
    return ret

def poly_addroot(gf, p, v):
    """Multiply polynomial p over field gf with (x - v)."""
    return (p << gf.BITS) ^ vec_mul(gf, p, v)

def poly_monic(gf, p):
    """Make polynomial p over field gf monic, also returning the multiplication factor."""
    i = gf.inv(vec_get(gf, p, poly_degree(gf, p)))
    return vec_mul(gf, p, i), i

def poly_ismonic(gf, p):
    """Check whether polynomial p over field gf is monic."""
    return vec_get(gf, p, poly_degree(gf, p)) == 1

def poly_divmod(gf, p, m):
    """Divide polynomial p by monic polynomial m, over field gf. Return quotient and remainder."""
    assert poly_ismonic(gf, m)
    pn, mn = poly_degree(gf, p), poly_degree(gf, m)
    if mn == 0: return p, 0
    quot = 0
    while pn >= mn:
        term = vec_get(gf, p, pn)
        quot |= term << ((pn - mn) * gf.BITS)
        assert term != 0
        p ^= vec_mul(gf, m, term) << ((pn - mn) * gf.BITS)
        pn = poly_degree(gf, p)
    return quot, p

def poly_mod(gf, p, m):
    """Compute polynomial p modulo monic polynomial m, over field gf.

    Identical to poly_divmod(gf, p, m)[1], but faster.
    """
    assert poly_ismonic(gf, m)
    pn, mn = poly_degree(gf, p), poly_degree(gf, m)
    if mn == 0: return 0
    while pn >= mn:
        p ^= vec_mul(gf, m, vec_get(gf, p, pn)) << ((pn - mn) * gf.BITS)
        pn = poly_degree(gf, p)
    return p

def gf_pow(gf, v, n):
    """Raise element v of field gf to power n (n >= 0)."""
    r = 1
    for i in range(n.bit_length() - 1, -1, -1):
        r = gf.sqr(r)
        if (n >> i) & 1:
            r = gf.mul(r, v)
    return r

def poly_mulmod(gf, a, b, m):
    """Multiply polynomials a and b over field gf, modulo monic polynomial m."""
    return poly_mod(gf, poly_mul(gf, a, b), m)

def poly_sqrmod(gf, a, m):
    """Square polynomial a over field gf, modulo monic polynomial m."""
    return poly_mod(gf, poly_sqr(gf, a), m)

def poly_powmod(gf, v, n, m):
    """Raise polynomial v over field gf to power n (n >= 0), mod polynomial m."""
    r = 1
    for i in range(n.bit_length() - 1, -1, -1):
        r = poly_sqrmod(gf, r, m)
        if (n >> i) & 1: r = poly_mulmod(gf, r, v, m)
    return r

def poly_extgcd(gf, a, b):
    """Return the gcd of polynomials a and b over field gf, as well as the Bezout coefficients."""
    aa, ab, ba, bb = 1, 0, 0, 1
    if a == 0 or poly_degree(gf, a) < poly_degree(gf, b):
        a, b = b, a
        aa, ab, ba, bb = ba, bb, aa, ab
    while b != 0:
        b, i = poly_monic(gf, b)
        ba, bb = vec_mul(gf, ba, i), vec_mul(gf, bb, i)
        q, r = poly_divmod(gf, a, b)
        a, b = b, r
        aa, ab, ba, bb = ba, bb, aa ^ poly_mul(gf, ba, q), ab ^ poly_mul(gf, bb, q)
    return a, aa, ab

def poly_gcd(gf, a, b):
    """Return the gcd of polynomials a and b over field gf."""
    if a == 0 or poly_degree(gf, a) < poly_degree(gf, b):
        a, b = b, a
    while b != 0:
        b, i = poly_monic(gf, b)
        a, b = b, poly_mod(gf, a, b)
    return a

def poly_invmod(gf, p, m):
    """Return the inverse of polynomial p over field gf, modulo polynomial m."""
    if p == 1: return 1
    gcd, inv, _ = poly_extgcd(gf, p, m)
    if gcd != 1: return None
    return inv

def poly_sqr(gf, p):
    """Square a polynomial p over field gf. This exploits the Frobenius endomorphism."""
    ret = 0
    for d in range(poly_degree(gf, p) + 1):
        ret |= gf.sqr(vec_get(gf, p, d)) << (2 * gf.BITS * d)
    return ret

def poly_isirreducible(gf, p):
    """Test whether monic polynomial p over field gf is irreducible."""
    # See https://en.wikipedia.org/wiki/Factorization_of_polynomials_over_finite_fields#Rabin.27s_test_of_irreducibility
    assert poly_ismonic(gf, p)
    n = poly_degree(gf, p)
    if n <= 1: return True
    h = 1 << gf.BITS
    factors = z_factor(n)
    for d in range(n):
        if len(factors) and factors[-1][0] * d == n:
            if poly_gcd(gf, p, h ^ (1 << gf.BITS)) != 1: return False
            factors.pop()
        for _ in range(gf.BITS):
            h = poly_sqrmod(gf, h, p)
    return h == (1 << gf.BITS)

def poly_isprimitive(gf, p):
    """Test whether monic polynomial p over field gf is primitive."""
    assert poly_ismonic(gf, p)
    n = poly_degree(gf, p)
    if n == 0: return False
    if n == 1: return True
    if not poly_isirreducible(gf, p): return False
    for (factor, _) in z_factor((1 << (n * gf.BITS)) - 1):
        if poly_powmod(gf, 1 << gf.BITS, ((1 << (n * gf.BITS)) - 1) // factor, p) == 1:
            return False
    return True

def poly_primitive(gf, n):
    """Find a primitive polynomial of degree n over field gf."""
    for p in range(1 << (gf.BITS * n), 2 << (gf.BITS * n)):
        if poly_isprimitive(gf, p):
            return p
    assert False

def poly_list(gf, p):
    """Convert polynomial p over field gf to list representation (low to high)."""
    return [vec_get(gf, p, i) for i in range(poly_degree(gf, p) + 1)]

def gf_minpoly(gf, v):
    """Given an extension field gf and an element v in it, find its minimal polynomial over gf.BASE."""
    basebits = gf.BASE.BITS
    r = 1
    a = v
    while True:
        r = poly_addroot(gf, r, v)
        v = gf_pow(gf, v, 1 << basebits)
        if v == a:
            break
    s = 0
    for d in range(poly_degree(gf, r) + 1):
        c = vec_get(gf, r, d)
        assert (c >> basebits) == 0
        s |= c << (basebits * d)
    assert poly_isirreducible(gf.BASE, s)
    return s

def gf_isprimitive(gf, v):
    """Determine whether v is a primitive element of field gf."""
    if gf.PRIM is not None and v == gf.PRIM: return True
    for factor, _ in z_factor((1 << gf.BITS) - 1):
        if gf_pow(gf, v, ((1 << gf.BITS) - 1) // factor) == 1:
            return False
    return True

def gf_primitive(gf):
    """Find a primitive element of field gf."""
    if gf.PRIM is None:
        start = 2
        if gf.BASE:
            start = (1 << gf.BASE.BITS) + 1
        for i in range(start, 1 << gf.BITS):
            if gf_isprimitive(gf, i):
                gf.PRIM = i
                break
    return gf.PRIM

def poly_reverse(gf, p):
    """Given a polynomial p over gf with non-zero constant term, reverse the coefficients."""
    assert p & ((1 << gf.BITS) - 1) != 0
    degree = poly_degree(gf, p)
    ret = 0
    for i in range(degree + 1):
        ret |= vec_get(gf, p, i) << ((degree - i) * gf.BITS)
    return ret

def poly_square_coef(gf, p):
    """Square the coefficients of a polynomial over field gf."""
    ret = 0
    for i in range(poly_degree(gf, p) + 1):
        ret |= gf.sqr(vec_get(gf, p, i)) << (i * gf.BITS)
    return ret
 
def poly_tracemod(gf, p, v):
    """Compute y + y^2 + y^4 + ... + y^(order(gf)/2) mod p over gf, where y=v*x."""
    out = v << gf.BITS
    for _ in range(gf.BITS - 1):
        out = poly_mod(gf, poly_sqr(gf, out) ^ (v << gf.BITS), p)
    return out

def poly_frobeniusmod(gf, p):
    """Compute x^(order(gf)) mod p, for monic polynomial p over gf."""
    out = 1 << gf.BITS
    for _ in range(gf.BITS):
        out = poly_sqrmod(gf, out, p)
    return out

def poly_findroots(gf, p):
    """Find the roots of polynomial p over gf, or None if not fully factorizable into unique roots."""
    assert p != 0
    if poly_degree(gf, p) == 0:
        return []
    p, _ = poly_monic(gf, p)
    if poly_degree(gf, p) == 1:
        return [vec_get(gf, p, 0)]
    if poly_frobeniusmod(gf, p) != (1 << gf.BITS):
        return None

    ret = []
    prim = gf_primitive(gf)
    def rec_split(p, v):
        assert poly_degree(gf, p) > 0 and poly_ismonic(gf, p)
        if poly_degree(gf, p) == 1:
            ret.append(vec_get(gf, p, 0))
            return
        while True:
            trace = poly_tracemod(gf, p, v)
            v = gf.mul(v, prim)
            gcd = poly_gcd(gf, trace, p)
            if poly_degree(gf, gcd) < poly_degree(gf, p) and poly_degree(gf, gcd) > 0:
                break
        factor1, _ = poly_monic(gf, gcd)
        factor2, _ = poly_divmod(gf, p, factor1)
        rec_split(factor1, v)
        rec_split(factor2, v)

    rec_split(p, random.randrange(1, 1 << gf.BITS))
    return sorted(ret)

def berlekamp_massey(gf, syndromes):
    """The Berklekamp-Massey algorithm.

    Given a sequence of elements over field gf, return the shortest LFSR that generates
    it, represented as a polynomial."""
    c, b, l, m, bi = 1, 1, 0, 1, 1

    for n in range(len(syndromes)):
        d = syndromes[n]
        for i in range(1, l+1):
            d ^= gf.mul(syndromes[n - i], vec_get(gf, c, i))
        if d == 0:
            m += 1
        elif 2 * l <= n:
            b, c = c, c ^ vec_mul(gf, b, gf_mul(gf, d, bi)) << (gf.BITS * m)
            l = n + 1 - l
            bi = gf_inv(gf, d)
            m = i
        else:
            c ^= vec_mul(gf, b, gf_mul(gf, d, bi)) << (gf.BITS * m)
            m += 1
    return c


class GF2:
    """Field operations object for GF(2)."""

    def __init__(self):
        self.BITS = 1
        self.BASE = None
        self.PRIM = 1
        pass

    def mul(self, a, b):
        return a & b

    def sqr(self, v):
        return v

    def inv(self, v):
        return v


class GF2Ext:
    """Field operations object for extension fields of characteristic 2 fields."""

    def __init__(self, base, modulus, modulus_is_primitive=False):
        """Construct a field extension over field base and irreducible monic polynomial over it."""
        if isinstance(modulus, list):
            modulus = poly_make(base, modulus)
        assert isinstance(modulus, int)
        assert poly_ismonic(base, modulus)
        assert poly_degree(base, modulus) > 0
        assert poly_isirreducible(base, modulus)
        self._modulus = modulus
        self.BITS = base.BITS * poly_degree(base, modulus)
        self.BASE = base
        if modulus_is_primitive:
            assert poly_isprimitive(base, modulus)
            self.PRIM = 1 << base.BITS
        else:
            self.PRIM = None

    def mul(self, a, b):
        return poly_mulmod(self.BASE, a, b, self._modulus)

    def sqr(self, v):
        return poly_sqrmod(self.BASE, v, self._modulus)

    def inv(self, v):
        if v == 1: return 1
        return poly_invmod(self.BASE, v, self._modulus)

class GF2n:
    """Field operations object for GF(2^n).

    The behavior of GF2n(modulus) is identical to GF2Ext(GF2(), modulus), but faster.
    """

    def __init__(self, modulus, modulus_is_primitive=False):
        """Construct a field GF(2^n), given a degree n irreducible polynomial over GF(2)."""
        assert isinstance(modulus, int)
        assert modulus > 1
        self.BITS = modulus.bit_length() - 1
        self.BASE = GF2()
        assert poly_isirreducible(self.BASE, modulus)
        self._modulus = modulus
        if modulus_is_primitive:
            assert poly_isprimitive(self.BASE, modulus)
            self.PRIM = 2
        else:
            self.PRIM = None

    def _mul2(self, v):
        v <<= 1
        if v >> self.BITS:
            v ^= self._modulus
        return v

    def mul(self, a, b):
        ret = 0
        while b:
            if b & 1:
                ret ^= a
            b >>= 1
            a = self._mul2(a)
        return ret

    def sqr(self, v):
        return self.mul(v, v)

    def inv(self, v):
        if v == 1: return 1
        assert v != 0
        t1, t2 = 0, 1
        r1, r2 = self._modulus, v
        r1l, r2l = self.BITS + 1, r2.bit_length()
        while r2:
            q = r1l - r2l
            r1 ^= r2 << q
            t1 ^= t2 << q
            r1l = r1.bit_length()
            if r1 < r2:
                t1, t2 = t2, t1
                r1, r2 = r2, r1
                r1l, r2l = r2l, r1l
        assert r1 == 1
        return t1

class GF2Table:
    """Class that optimizes behavior of another field, using exp/log tables."""

    def __init__(self, unopt):
        """Construct a GF2Table object given the non-table version of the field."""
        prim = gf_primitive(unopt)
        logtbl = [0 for _ in range(1 << unopt.BITS)]
        exptbl = [0 for _ in range((1 << unopt.BITS) - 1)]
        v = 1
        for l in range((1 << unopt.BITS) - 1):
            assert (v == 1) == (l == 0)
            logtbl[v] = l
            exptbl[l] = v
            v = unopt.mul(v, prim)
        assert v == 1
        self.BITS = unopt.BITS
        self.BASE = unopt.BASE
        self.PRIM = prim
        self._logtbl = tuple(logtbl)
        self._exptbl = tuple(exptbl)

    def mul(self, a, b):
        """Multiply field elements a and b."""
        if a == 0 or b == 0: return 0
        l = self._logtbl[a] + self._logtbl[b]
        if (l + 1) >> self.BITS:
            l = l + 1 - (1 << self.BITS)
        return self._exptbl[l]

    def sqr(self, v):
        """Square field element v."""
        if v == 0: return 0
        l = 2 * self._logtbl[v]
        if (l + 1) >> self.BITS:
            l = l + 1 - (1 << self.BITS)
        return self._exptbl[l]

    def inv(self, v):
        """Invert non-zero field element v."""
        assert v != 0
        if v == 1: return 1
        return self._exptbl[(1 << self.BITS) - 1 - self._logtbl[v]]

import random
import unittest

def test_fields():
    return [
        GF2(),
        GF2Table(GF2()),
        GF2n(7),
        GF2Ext(GF2(), 11),
        GF2n(19),
        GF2Table(GF2n(37)),
        GF2n(67),
        GF2Table(GF2Ext(GF2n(67), [10, 63, 50, 1])),
        GF2Ext(GF2n(19), 0x100014912),
    ]

class TestPolyInvMod(unittest.TestCase):
    """Test class for poly_invmod."""

    def field_test(self, gf, degree):
        b = random.getrandbits(degree * gf.BITS)
        while True:
            a = random.getrandbits(degree * gf.BITS)
            m = random.getrandbits(degree * gf.BITS) | (1 << (degree * gf.BITS))
            if poly_gcd(gf, a, m) == 1:
                break
        ai = poly_invmod(gf, a, m)
        aia = poly_mulmod(gf, a, ai, m)
        assert aia == 1
        p = poly_mulmod(gf, a, b, m)
        b2 = poly_mulmod(gf, p, ai, m)
        assert b2 == b

    def test(self):
        """Run tests."""
        for field in test_fields():
            for degree in range(1, 100 // field.BITS):
                for j in range(5):
                    self.field_test(field, degree)

class TestPolyFindRoots(unittest.TestCase):
    """Test class for poly_findroots."""

    def field_test(self, gf):
        """Run tests for given field gf."""
        for test_size in [0, 1, 2, 3, 10]:
            roots = [random.randrange(1 << gf.BITS) for _ in range(test_size)]
            roots_set = set(roots)
            # Construct a polynomial with all elements of roots as roots (with multiplicity).
            poly = 1
            for root in roots:
                poly = poly_addroot(gf, poly, root)
            # Invoke the root finding algorithm.
            found_roots = poly_findroots(gf, poly)
            # The result must match the input, unless any roots were repeated.
            if len(roots) == len(roots_set):
                self.assertEqual(found_roots, sorted(roots))
            else:
                self.assertIsNone(found_roots)

    def test(self):
        """Run tests."""
        for field in test_fields():
            for j in range(10):
                self.field_test(field)

if __name__ == '__main__':
    unittest.main()
